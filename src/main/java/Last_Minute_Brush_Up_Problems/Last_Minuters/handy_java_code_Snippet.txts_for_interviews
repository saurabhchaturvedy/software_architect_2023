

// Find char with maximum frequency

 Map<Character, Long> charFrequencyMap = input.chars()
                .mapToObj(c -> (char) c)
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

char mostFrequentChar = charFrequencyMap.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .orElseThrow()
                .getKey();


// Convert an array to Collections List

List<String> list = Arrays.stream(array)
                .collect(Collectors.toList());


// Using Java 8 and IntStream to convert to List
        List<Integer> intList = IntStream.of(intArray)
                .boxed() // Convert to Integer objects
                .collect(Collectors.toList());


// Convert a List to a 2D array using Java 8
        int numRows = listOfLists.size();
        int numCols = listOfLists.get(0).size(); // Assuming all sublists have the same size

        int[][] array2D = listOfLists.stream()
                .map(list -> list.stream().mapToInt(Integer::intValue).toArray())
                .toArray(int[][]::new);

// First non-repeating character in a String

Character result =  input.chars()           // IntStream
             .mapToObj(i -> Character.toLowerCase(Character.valueOf((char) i)))  // convert to lowercase & then to Character object Stream
             .collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting())) // store in a LinkedHashMap with the count
             .entrySet().stream()                       // EntrySet stream
             .filter(entry -> entry.getValue() == 1L)   // extracts characters with a count of 1
             .map(entry -> entry.getKey())              // get the keys of EntrySet
             .findFirst().get();                        // get the first entry from the keys
        
         return result;  
